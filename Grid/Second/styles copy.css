 
/*Это правило применяется к внешнему <div>, так как ему было назначено ID #grid. */
#grid { 
      display: grid;/*Вы так-же можете использовать display: inline-grid, 
      что создать строчный грид-контейнер. 
      Или же вы можете использовать display: subgrid, 
      чтобы создать подсетку, это значение используется на самих grid элементах. */
      grid-template-rows: 1fr 1fr 1fr ; /* Ряды */
      /*1.5fr + 3fr + 4.5fr = 9fr Если родительский контейнер имеет ширину 900px
      100px, 7em, 30% */
      grid-template-columns: 1fr 1fr 1fr; /* Колонки */

      /*grid-template-rows: 1fr 1fr 1fr 1fr 1fr;
      Функция repeat() - Мы можем сделать это:
      grid-template-rows: repeat(5, 1fr);*/

      grid-gap: 2vw ; /*Выставляет разрыв - рассотяние (не ров!)
      100px 10px, 1em и т. д. */

      /*#grid > div {}*/
      font-size: 5vw;
      padding: .5em;
      background: gold;
      text-align: center;
      }

.body {
display: grid;
grid-template-areas:
/*Здесь мы из областей строим структуру сетки а внизу обзовём по классу каждую 
область и будем ею управлять */
“header header header”
“nav article ads”
“footer footer footer”;
grid-template-rows: 60px 1fr 60px;
/*Первая и третья строки — обе в 60px высотой, 
а вторая строка забирает все оставшееся место.*/
grid-template-columns: 20% 1fr 15%;
/* Первый столбец равен 20%, а третий 15%. 
Второй же забирает все оставшееся место. */
grid-gap: 10px;
height: 100vh;
margin: 0;
}



/*Теперь мы можем назначить каждую из этих грид-областей каждому элементу:*/

#pageHeader {
grid-area: header;
}
/*Свойство grid-area это сокращение свойства, 
которое позволяет вам размещать грид-элементы в гриде. 
В нашем случае, мы просто отсылаемся к названиям, 
которые мы предварительно указали в grid-template-areas.*/
#pageFooter {
grid-area: footer;
}
#mainArticle {
grid-area: article;
}
#mainNav {
grid-area: nav;
}
#siteAds {
grid-area: ads;
}